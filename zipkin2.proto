syntax = "proto3";

package zipkin2.proto3;

option java_multiple_files = true;

// Epoch timestamp are encoded fixed64 are varint would also be 8 bytes, and more
// expensive to encode and size. Duration is stored uint64, as often the numbers
// are quite small.
//
// Default values are ok, as only natural numbers are used. For example, zero is
// an invalid timestamp and an invalid duration, false values for debug or shared
// are ignorable, and zero-length strings also coerce to null.
//
// Note fields up to 15 take 1 byte to encode. Take care when adding new fields
// https://developers.google.com/protocol-buffers/docs/proto3#assigning-tags
message Span {
  // 8 or 16 bytes required
  bytes trace_id = 1;
  // 8 bytes optional
  bytes parent_id = 2;
  // 8 bytes required
  bytes id = 3;
  enum Kind {
    KIND_UNSPECIFIED = 0;
    SERVER = 1;
    CLIENT = 2;
    PRODUCER = 3;
    CONSUMER = 4;
  }
  Kind kind = 4;
  string name = 5;
  fixed64 timestamp = 6;
  uint64 duration = 7;
  Endpoint local_endpoint = 8;
  Endpoint remote_endpoint = 9;
  repeated Annotation annotations = 10;
  map<string, string> tags = 11;
  bool debug = 12;
  bool shared = 13;
}

message Endpoint {
  string service_name = 1;
  // 4 bytes
  bytes ipv4 = 2;
  // 16 bytes
  bytes ipv6 = 3;
  // technically uint16 would work, but there is none
  int32 port = 4;
}

message Annotation {
  fixed64 timestamp = 1;
  string value = 2;
}

// A list of spans with possibly different trace ids, in no particular order.
//
// This is used for all transports: POST, Kafka messages etc. No other fields
// are expected, This message facilitates the mechanics of encoding a list, as
// a field number is required. The name of this type is the same in the OpenApi
// aka Swagger specification.
message ListOfSpans {
  repeated Span spans = 1;
}

message DependencyLink {
  string parent = 1;
  string child = 2;
  uint64 call_count = 3;
  uint64 error_count = 4;
}

